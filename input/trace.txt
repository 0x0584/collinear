See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (17 warnings)
Checkstyle:   FAILED (0 errors, 47 warnings)

Correctness:  38/41 tests passed
Memory:       1/1 tests passed
Timing:       30/41 tests passed

Aggregate score: 90.24%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.6K Jul 26 14:03 BruteCollinearPoints.java
5.9K Jul 26 14:03 FastCollinearPoints.java
4.6K Jul 26 14:03 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'indexOf()' is never called.  At BruteCollinearPoints.java:[line 140]
L P SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS SIC: Should the inner class 'FastCollinearPoints$Segment' be refactored into a static nested class?  At FastCollinearPoints.java:[lines 32-52]


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:44: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
BruteCollinearPoints.java:164: Too many control variables in the for statement [ForLoopVariableCount]
BruteCollinearPoints.java:165: Avoid reassigning the loop control variable 'j' [AvoidReassigningLoopVariables]
BruteCollinearPoints.java:166: Avoid reassigning the loop control variable 'i' [AvoidReassigningLoopVariables]
BruteCollinearPoints.java:167: Avoid reassigning the loop control variable 'j' [AvoidReassigningLoopVariables]
BruteCollinearPoints.java:168: Avoid reassigning the loop control variable 'i' [AvoidReassigningLoopVariables]
FastCollinearPoints.java:13: Avoid unused private instance (or static) variables, such as 'height'. [UnusedPrivateField]
FastCollinearPoints.java:13: Avoid unused private instance (or static) variables, such as 'width'. [UnusedPrivateField]
FastCollinearPoints.java:14: Avoid unused private instance (or static) variables, such as 'offset'. [UnusedPrivateField]
FastCollinearPoints.java:32: The user-supplied array 'A' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:113: Avoid reassigning the loop control variable 'j' [AvoidReassigningLoopVariables]
FastCollinearPoints.java:121: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:224: Too many control variables in the for statement [ForLoopVariableCount]
FastCollinearPoints.java:225: Avoid reassigning the loop control variable 'j' [AvoidReassigningLoopVariables]
FastCollinearPoints.java:226: Avoid reassigning the loop control variable 'i' [AvoidReassigningLoopVariables]
FastCollinearPoints.java:227: Avoid reassigning the loop control variable 'j' [AvoidReassigningLoopVariables]
FastCollinearPoints.java:228: Avoid reassigning the loop control variable 'i' [AvoidReassigningLoopVariables]
PMD ends with 17 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:1:8: Unused import statement for 'edu.princeton.cs.algs4.StdDraw'. [UnusedImports]
[WARN] BruteCollinearPoints.java:3:8: Unused import statement for 'edu.princeton.cs.algs4.StdRandom'. [UnusedImports]
[WARN] BruteCollinearPoints.java:8:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] BruteCollinearPoints.java:11:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BruteCollinearPoints.java:11:30: The constant 'step' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] BruteCollinearPoints.java:14:17: The instance variable 'n_segmts' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] BruteCollinearPoints.java:33:18: The method 'generate_segment' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] BruteCollinearPoints.java:38:24: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] BruteCollinearPoints.java:63:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] BruteCollinearPoints.java:77:71: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] BruteCollinearPoints.java:78:36: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] FastCollinearPoints.java:2:8: Unused import statement for 'java.util.Iterator'. [UnusedImports]
[WARN] FastCollinearPoints.java:3:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] FastCollinearPoints.java:7:8: Unused import statement for 'edu.princeton.cs.algs4.StdIn'. [UnusedImports]
[WARN] FastCollinearPoints.java:8:8: Unused import statement for 'edu.princeton.cs.algs4.StdDraw'. [UnusedImports]
[WARN] FastCollinearPoints.java:9:8: Unused import statement for 'edu.princeton.cs.algs4.StdRandom'. [UnusedImports]
[WARN] FastCollinearPoints.java:13:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] FastCollinearPoints.java:13:30: The constant 'width' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] FastCollinearPoints.java:13:43: The constant 'height' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] FastCollinearPoints.java:14:30: The constant 'offset' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] FastCollinearPoints.java:25:17: The instance variable 'n_segmts' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] FastCollinearPoints.java:29:29: The instance variable 'A' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] FastCollinearPoints.java:32:44: The parameter variable 'A' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] FastCollinearPoints.java:34:47: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] FastCollinearPoints.java:58:62: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] FastCollinearPoints.java:58:63: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:63:18: The method 'append_segment' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] FastCollinearPoints.java:64:15: The local variable 'in_seg' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:73:17: The method 'generate_segment' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] FastCollinearPoints.java:77:25: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] FastCollinearPoints.java:81:13: The local variable 'n_pnts' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:106:18: The method 'recurse_segments' must start with a lowercase letter and use camelCase. [MethodName]
[WARN] FastCollinearPoints.java:108:20: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] FastCollinearPoints.java:116:18: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] FastCollinearPoints.java:150:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] Point.java:16:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Point.java:88:34: ')' is preceded with whitespace. [ParenPad]
[WARN] Point.java:145:27: Do not put multiple statements on the same line. [OneStatementPerLine]
[WARN] Point.java:145:37: Do not put multiple statements on the same line. [OneStatementPerLine]
...
Checkstyle ends with 0 errors and 41 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:10:1: Defining a nested class in this program suggests poor design. [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:11:1: Defining a nested class in this program suggests poor design. [Design]
[WARN] FastCollinearPoints.java:13:42: The numeric literal '800' appears to be unnecessary. [NumericLiteral]
[WARN] FastCollinearPoints.java:13:56: The numeric literal '600' appears to be unnecessary. [NumericLiteral]
[WARN] FastCollinearPoints.java:14:43: The numeric literal '32768' appears to be unnecessary. [NumericLiteral]
[WARN] FastCollinearPoints.java:14:49: The numeric literal '20' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 5 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
     -  wrong order: slope-ascending, but breaking ties by natural order
     -  slope order depends only on the slope, not on the x- or y-coordinates
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
     -  wrong order: slope-ascending, but breaking ties by natural order
     -  slope order depends only on the slope, not on the x- or y-coordinates
  * throw java.lang.NullPointerException if either argument is null
==> FAILED


Total: 2/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including:
      '(2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)'


  * filename = input48.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 6
    - 5 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
==> passed

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
  * 25-by-4 grid
==> passed

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 20/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3600          47           3694                  255
=> passed    32   0.00       30752         126          31004                 1023
=> passed    64   0.01      254016         306         254628                 4095
=> passed   128   0.01     2064512         738        2065988                16383
=> passed   256   0.10    16646400        1731       16649862                65535
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3600          47           3694                  447
=> passed    32   0.00       30752         120          30992                 1407
=> passed    64   0.01      254016         312         254640                 4863
=> passed   128   0.02     2064512         737        2065986                17919
=> passed   256   0.16    16646400        1714       16649828                68607
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        3969        8552          21073                 2079
=> passed   128   0.00       16129       41337          98803                 8255
=> passed   256   0.01       65025      196388         457801                32895
=> passed   512   0.03      261121      919020        2099161               131327
=> passed  1024   0.11     1046524     4204344        9455212               524804
=> passed  2048   0.45     4190182    18962919       42116020              2098202
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (42116020 / 9455212) = 2.16
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2256        6207          14670                 4032
=> passed   128   0.00        8624       28799          66222                16256
=> passed   256   0.00       33648      131327         296302                65280
=> passed   512   0.02      132848      590335        1313518               261632
=> passed  1024   0.06      527856     2622463        5772782              1047552
=> passed  2048   0.22     2104304    11536383       25177070              4192256
=> passed  4096   0.96     8402928    50335743      109074414             16773120
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (109074414 / 25177070) = 2.12
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       13169        8375          29919                 2841
=> passed   128   0.00      143253       39545         222343                11481
=> FAILED   256   0.02     1985279      181688        2348655   (1.1x)       46169
=> FAILED   512   0.14    30487655      816444       32120543   (4.0x)      185177
=> FAILED  1024   1.87   480562707     3628849      487820405  (15.6x)      741721
=> FAILED  2048  28.75  7656691219    15730269     7688151757  (62.4x)     2968921
Aborting: time limit of 10 seconds exceeded

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       15987        8213          32413                 2813
=> passed   128   0.00      158809       41177         241163                11339
=> passed   256   0.02     2139205      192594        2524393                45575
=> FAILED   512   0.16    31497785      887753       33273291   (3.0x)      182767
=> FAILED  1024   2.34   511121853     3993993      519109839  (12.1x)      732057
=> FAILED  2048  37.27  8051834075    17783168     8087400411  (47.9x)     2930233
Aborting: time limit of 10 seconds exceeded

Total: 20/31 tests passed!


================================================================
